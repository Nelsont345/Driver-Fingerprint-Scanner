;Copyright (c) 2013 Manolis Agkopian		    
;See the file LICENCE for copying permission.	    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	.DEVICE ATmega128
	.include "m128def.inc"




;***** Pin definitions *****
.equ	UART_TxPort = PORTD    ;set port D aS OUTPUT FOR TRANSMIT
.equ	UART_TxDDR  = DDRD				;DIRECTION REGISTER
.equ	UART_RxPin  = PIND				;sET PIN D FOR READ
.equ	UART_RxDDR  = DDRD					;DIRECTION REGISTER
.equ	RxD	= 2							;set pin  2 as receive, might be a different pin
.equ	TxD	= 3								;set pin 3 as transmit

;.equ	savedregister=0x0200      ;Address in SRAM, where the new database will be stored
.equ	savedregister=0x0300      ;Address in SRAM, where the new database will be stored
.equ	compare_address = 0x0400

;*****    Registers    *****
.def	bitcounter  = R24				;??
.def	temp	    = R16			;COUNTER?
.def	UART_buffer = R23			;WHat IS BUFFER?

;*****  Speed setting  *****
.equ	CRYSTAL_FREQ = 8000000   ;SET READ/ WRITE TO BE EQUAL, 8MHZ, now 1
.equ	BAUD 		 =  57600  ;57600     ;bits per second, rate ;9600

;*****       Etc       *****
.equ	stop_bits 	       = 1     ;STOPS READING
; hand-picked for easier auto-baud calculations (no division)
.equ	cycles_per_bit 	   = 12 ;without delays + 4*nop
.equ	const_delay_cycles = 9	;rjmp + ret + 2*nop

; byte in ram that keeps speed
.dseg
DELAY_VALUE: .byte 1        ;assign memory for clock speed value?
.cseg

;***** Precalculations *****
;pure cycles necessary per bit
.equ	c = CRYSTAL_FREQ / BAUD			;relates clock speed to transmission
;delay cycles
.equ	d = (c - cycles_per_bit - 2*const_delay_cycles)/2
;delay value	
.equ	b = d / 3						;divison by 3 of d, definition

; throw error if we're out of bounds
.if b > 255
	.error "Baud rate is too low!"		;check if transmission speed is correct
.elif b <= 0
	.error "Baud rate is too high!"
.endif

; ******* Port B Setup Code ****  
		ldi r16, $FF		; will set to outputs so i cab use Leds for debugging
		out DDRB , r16		; Port B Direction Register
		ldi r16, 00		; Who cares what is it....
		out PORTB, r16		; Port B value

		ldi r16, $0F		; Stack Pointer Setup
		out SPH,r16			; Stack Pointer High Byte 
		ldi r16, $FF		; Stack Pointer Setup 
		out SPL,r16			; Stack Pointer Low Byte 

genimg:
.db $EF,$01,$FF,$FF,$FF,$FF,$01,$00,$03,$01, $00, $05,$08,$00

img2tBuff1:
.db $EF,$01,$FF,$FF,$FF,$FF,$01,$00,$04,$02,$1,$00,$08,$0

img2tBuff2:
.db $EF,$01,$FF,$FF,$FF,$FF,$01,$00,$04,$02,$2,$00,$08,$0

regmodel:
.db $EF,$01,$FF,$FF,$FF,$FF,$01,$00,$03,$05,$00,$09    

Store1:
.db $EF,$01,$FF,$FF,$FF,$FF,$01,$06,$00,$06,$01, $00, $01, $00, $0F, $00


rjmp main
;****************************************************
;**********************CODE HERE*********************
;****************************************************

;****************************************************
;*****                 SEND BYTE                *****
;****************************************************
; UART_buffer -> UART
UART_send_byte:	
	ldi		bitcounter, 9 + stop_bits ;CHECK IF CORRECRT, 7 + stop_bits
	com		UART_buffer	
	sec		

; 12 cycles here (without delays)
uart_send_next_bit:	
	brcc	uart_send_1
	cbi		UART_TxPort, TxD
	rjmp	uart_wait

uart_send_1:	
	sbi		UART_TxPort, TxD
	nop

uart_wait:	
	rcall 	UART_delay	
	rcall 	UART_delay

	nop	nop nop nop
	lsr		UART_buffer
	dec		bitcounter		
	brne	uart_send_next_bit
					
	sbi		UART_TxPort, TxD
	ret		
		
;****************************************************
;*****                 GET BYTE                 *****
;****************************************************
; UART -> UART_buffer
UART_get_byte:	
	ldi 	bitcounter, 9

uart_wait_for_start:	
	sbic 	UART_RxPin, RxD	
	rjmp 	uart_wait_for_start
	;synchronize for 0.5 bit length
	rcall 	UART_delay	

; 10 cycles here (without delays)
uart_get_bit:	
	rcall 	UART_delay	
	rcall 	UART_delay		

	clc			
	sbic 	UART_RxPin, RxD	;RxD is a pin where out data will appear bit by bit
	sec			
	
	nop	nop nop nop
	dec 	bitcounter		
	breq 	uart_bit_done	
				
	ror 	UART_buffer		
	rjmp 	uart_get_bit	

uart_bit_done:	
	ret

;****************************************************
;*****                UART DELAY                *****
;****************************************************
; 3*b + const_delay_cycles
UART_delay:	
	lds		temp, DELAY_VALUE
UART_delay1:	
	dec		temp
	brne	UART_delay1
	nop

	ret

;****************************************************
;*****              UART AUTO-BAUD              *****
;****************************************************
; calculates calc_b after receiving 0x55
; calc_b -> temp
; intermediate result is c/6
; sbis (2) + inc (1) + breq (2) + nop (1)
/*
UART_autocalibrate:
	clr 	temp
	
uart_cal_wait_start:	
	sbic 	UART_RxPin, RxD	
	rjmp 	uart_cal_wait_start

uart_cal_wait_bit:	
	sbis 	UART_RxPin, RxD	
	rjmp 	uart_cal_wait_bit

uart_measure_bit:
	sbis 	UART_RxPin, RxD		
	rjmp 	uart_calibration_done
	nop
	inc		temp
	breq	uart_calibration_fail

uart_calibration_done:
	; b = c/6 - cycles_per_bit/6 - const_delay_cycles/3
	; temp = c/6
	cpi		temp, cycles_per_bit/6
	brlo	uart_calibration_fail
	subi	temp, cycles_per_bit/6

	cpi		temp, const_delay_cycles/3
	brlo	uart_calibration_fail
	subi	temp, const_delay_cycles/3

	sts		DELAY_VALUE, temp

uart_calibration_fail:
	ret
*/
;****************************************************
;*****               UART REINIT                *****
;****************************************************
; just resets DELAY_VALUE to default
uart_reinit:



	in		temp, UART_TxDDR
	ori		temp, (1<<TxD)
	out		UART_TxDDR, temp
	sbi		UART_TxPort, TxD

	in		temp, UART_RxDDR
	andi	temp, ~(1<<RxD) 
	out		UART_RxDDR, temp

	ldi		temp, b
	sts		DELAY_VALUE, temp
	ret

	ldi temp, $01
	ret
;**************************  MAIN ***************************************
;***********************************************************************
;******************************************************************
;******************************************************************
;******************************************************************
;******************************************************************
;******************************************************************
;******************************************************************
;******************************************************************
;******************************************************************
;******************************************************************
;******************************************************************

main:                                ;!!!!!!!!!!!!RUNS ONCE HERE
	;rcall Idisp
	rcall uart_reinit
	rcall DATABASE_TO_SRAM ;this takes the compasioson message and saves that in memorry at 0x0400
	
sendloop:
	rcall send_genimg	
	rcall send_img2tBuff1
	rcall send_genimg	
	rcall send_img2tBuff2
	rcall send_regmodel
	rcall send_Store1
	;rcall Mess1Out ; this send message to the deiv ce
	rcall save_data_start ; this takes the message from device and savedss to sram, at  0x0300
	rcall compare_basic2

	;img2tBuff1, img2tBuff2, regmodel, Store1


	;ldi UART_buffer, $40
	; call sending rmess routinge
	;rcall Mess1Out
	;call save_data_start
	
	;rcall compare_basic2
	
	;lds r16, 0x0309
	;out portb, r16
	;mov r22, UART_buffer
	;out portb, r22
	;rcall DEL49ms

	;rcall UART_send_byte
	; UART BUFFER is the data to send
	
	
	
	rjmp sendloop

;******************************************************************
;******************************************************************
;******************************************************************
;******************************************************************
;******************************************************************

;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  Beginning OF RETURN    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  Beginning OF RETURN    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX



save_data_start:
	push r20
	 ldi XH, high(savedregister) ;create 16 bit address, create *2?
	 ldi XL, low(savedregister)
	 ldi r25, 12
	 ; memory initisised
save_data: ; 12 bytes to collect - collect byte by byte
	rcall UART_get_byte	
	mov r22, UART_buffer
	;out portb, r22
	;set up memory for input i.e what is saved in r22
	;use SRAM 
	st X+, r22         ;store 8 bits wiht a 16 bit address in SRAM


	Dec r25
	cpi  r25, 0
	brne save_data ; if it is zero just go on
	pop r20
	ret


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^DATABASE TO SRAM^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

DATABASE_TO_SRAM: ;saves to 0x0C00  
push r20
compare_database:
;.db $EF, $01, $FF, $FF, $FF, $FF, $07,$00, $03, $00, $00, $0A  ;changed Byte 9 from 02 to 00  ;cagnged byte 1 from EF to EE

.db $EF, $01, $FF, $FF, $FF, $FF, $07,$00, $03, $00, $00, $0A    ;get IM

;.db $EF, $01, $FF, $FF, $FF, $FF, $07,$00, $03, $00, $00, $0A  ;


;.db $11, $11, $FF, $FF, $FF, $00, $FF,$FF, $FF, $11, $FF, $AA 
makingZalocation:
	ldi XH, high(compare_address) ;create 16 bit address?
	ldi XL, low(compare_address)  ;Leave as 8 bit

	ldi ZH, HIGH(compare_database*2)  ;leave as 16 bit
    ldi ZL, LOW(compare_database*2)
	ldi r20, 12  ;counter

	;address
	
program_to_memory:
	lpm 
	;mov r19, r0 ;r19 cointans byte by byte
	ADIW ZL, $01
	dec r20
	
	;now you have data in r19 and you want to store it
	
	st X+, r0

	;end if counted
	cpi r20, $0
	breq program_to_memory_end
	rjmp program_to_memory

program_to_memory_end:
	pop r20
	ret

;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^DATABASE TO SRAM  END^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 ;*********************************COMPARING1**************************************
 ;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

 ; this should be loaded only once
 /*

generateX:
.db 0x300, 0x301, 0x302, 0x303, 0x304, 0x305, 0x306, 0x307, 0x308, 0x309, 0x310, 0x311
ret

compare_data:
; this is responce code
;.db $0A, $00, $00, $03, $00, $07, $FF, $FF, $FF, $FF, $01, $EF
.db $EF, $01, $FF, $FF, $FF, $FF, $07,$00, $03, $02, $00, $0C

compare_basic:

ldi r20, $02 ;means nothing
ldi r18, 0  ;means nothing too
LDI r25, 12 ;number of characters or bytes ; this displays the number of r18 ; to send command 13

; po0int x to the memory
;ldi XL, low(generateX*2)
;ldi XH, high(generateX*2) ; was senddataregister

; do not repeat the thing above
 

Comp1Out:	;the one we compare to

			  LDI ZH, HIGH(compare_data*2)
              LDI ZL, LOW(compare_data*2)
              
Comp1More:
              LPM  ;isssue loading SRAM and incrementing

			  ; at this point we have Z(compare) in r18
			  ;we want to move this to store in different register
			  mov r19, r0 ; r19 is out test data from Z(compare message)
			  ADIW ZL, $01
			  ;now get X stuff in the memory
			  ;rcall generateX
			  ldi zL, low(generateX*2)
			  ldi zH, high(generateX*2)
			  lpm ; do not know shy this is here
			  mov r21,r0 ; move the X from r0
			  ld r18, X+ ; not sure if it is decremnenting  ;X is just r26?
			  ; now you have the value  of memory address in r18 one by one
				; r18 is X, r19 is Z
			   
			  ;rcall BigDEL
              cp r19, r18	;compaer X (memory) and Z		  ( message database)
			  brne statefalse
			  ;out portB, r20
			;rcall UART_delay
			;rcall bigdel
			;rcall bigdel
			;rcall bigdel
			;rcall bigdel
			
			  
			  DEC r25
			  ;ADIW XL, $01
			  ADIW ZL, $01
			  cpi r25, $0			 
			  breq Comp1End
			  ;ADIW ZL, $01
			  rjmp Comp1More
			  ; if r18>0 then retrurn to mess1more
Comp1End:     


			rjmp sendloop

statefalse:
	push r22
	ldi r22, $0F
	out portB, r22
	; ldi r25, 0  to end the loop
	pop r22
	ret
	;rjmp sendloop
*/
 ;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  ;*********************************COMPARING2*************************************


; in this routine we are going to compare 2 sram databases
compare_basic2:

push r17
push r20
push r21
push r18
ldi r18,  0  ;counter
rcall Comp1Out2Z
rcall Comp1Out2Y
rjmp Comp1More2


Comp1Out2Z:	;the one we compare to

			  LDI ZH, HIGH(compare_address)   
              LDI ZL, LOW(compare_address)
			  ret
Comp1Out2Y:
              ldi YL, low(savedregister)
			  ldi YH, high(savedregister) 
			  ret
  
			   
Comp1More2:
			;load Z to r20

			ld r20, Z+
			ld r17, Y+

			inc r18

			cp r20, r17 ; compare the two X, Z
			brne statefalse2 ;go to false message if not equal

			


			cpi r18, 12 ; compare when end the cycle			
			brne Comp1More2

Comp1End2:     
			pop r17
			pop r20
			push r21
			push r18
			rjmp sendloop

statefalse2:
	push r22
	ldi r22, $0F
	out portB, r22
	 ;ldi r25, 0  ;to end the loop
	pop r22
	rcall bigdel
	rcall bigdel
	;rjmp statefalse2
	ret
	;rjmp sendloop


;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  END OF RETURN    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  END OF RETURN    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX




;.db $0F, $0

;.db $0,$0, $FF, $FF ,$0,$0
;.db $0F, $0

;Handshake
;.db $EF,$01,$FF,$FF,$FF,$FF,$01,$00,$04,$17,$00,$00,$1C,$00





;genimg:
;.db $EF,$01,$FF,$FF,$FF,$FF,$01,$00,$04,$02, $01, $00,$08;

;img2t:
;.db $EF,$01,$FF,$FF,$FF,$FF,$01,$00,$04,$02,$1,$00,$05,$0

send_genimg:
              
				ldi r18, 12
			  LDI ZH, HIGH(genimg*2)
              LDI ZL, LOW(genimg*2)
			  rcall Mess1Out
			  ret
send_img2tBuff1:
             
			ldi r18,13
			  LDI ZH, HIGH(img2tBuff1*2)
              LDI ZL, LOW(img2tBuff1*2)
			  rcall Mess1Out
			  ret

send_img2tBuff2:
             
			ldi r18,13
			  LDI ZH, HIGH(img2tBuff2*2)
              LDI ZL, LOW(img2tBuff2*2)
			  rcall Mess1Out
			  ret

send_regmodel:
             
			ldi r18,12
			  LDI ZH, HIGH(regmodel*2)
              LDI ZL, LOW(regmodel*2)
			  rcall Mess1Out
			  ret

send_Store1:
             
			ldi r18,15
			  LDI ZH, HIGH(Store1*2)
              LDI ZL, LOW(Store1*2)
			  rcall Mess1Out
			  ret

;img2tBuff1, img2tBuff2, regmodel, Store1			  
Mess1Out:
			push r17


			  
              ;LD r18, r22;number of characters or bytes ; this displays the number of r18 ; to send command 13  ;varies betwen 12 and 13

Mess1More:
              LPM 
              MOV r17, r0
              mov UART_buffer,r17
			  rcall UART_send_byte
              ;rcall Mess1LCD ; send it To LCD
			  ;rcall busylcd
              
			  ;delay this
			
			;rcall UART_delay
			;rcall UART_delay
			rcall UART_delay
			
			  
			  DEC r18
			  cpi r18, $0
			  breq Mess1End
			  ADIW ZL, $01
			  rjmp Mess1More
			  ; if r18>0 then retrurn to mess1more
Mess1End:     
			pop r17
			ret


;*************************************** LCD ROutines

;*******************************************************************************
; Display Initialization routine
;
; Since we cannot rely that that Power Supply will have on power up
; the required by Hitachi Specs.....we do the initialization 'by hand'.
; Follow Blindly the White-Red Book of Hitachi.
; Hitachi Liquid Crystal Disply LCD Initialization Sequence.
;
Idisp:		
		RCALL DEL15ms                ; wait 15ms for things to relax after power up           
		ldi r16,    $30	         ; Hitachi says do it...
		sts   $8000,r16                      ; so i do it....
		RCALL DEL4P1ms             ; Hitachi says wait 4.1 msec
		sts   $8000,r16	         ; and again I do what I'm told
		rcall Del49ms
		sts   $8000,r16	         ; here we go again folks
                rcall busylcd		
		ldi r16, $3F	         ; Function Set : 2 lines + 5x7 Font
		sts  $8000,r16
                rcall busylcd
		ldi r16,  $08	         ;display off
		sts  $8000, r16
                rcall busylcd		
		ldi r16,  $01	         ;display on
		sts  $8000,  r16
                rcall busylcd
                ldi r16, $38	        ;function set
		sts  $8000, r16
		rcall busylcd
		ldi r16, $0E	        ;display on
		sts  $8000, r16
		rcall busylcd
		ldi r16, $06                           ;entry mode set increment no shift
		sts  $8000,  r16
                rcall busylcd
                clr r16
                ret
;
;**********************************************************************************
; This clears the display so we can start all over again
;
CLRDIS:
	        ldi r16,$01	; Clear Display send cursor 
		sts $8000,r16   ; to the most left position
		rcall busylcd
                ret
;**********************************************************************************
; A routine the probes the display BUSY bit
;
   
busylcd:        
        lds r16, $8000   ;access 
        sbrc r16, 7      ;check busy bit  7
        rjmp busylcd
        rcall BigDEL

        ret              ;return if clear
;
;********************   DELAY ROUTINES ********************************************
BigDEL:
             rcall Del49ms
             rcall Del49ms
             rcall Del49ms
             rcall Del49ms
             rcall Del49ms
             ret
;
DEL15ms:
;
; This is a 15 msec delay routine. Each cycle costs
; rcall           -> 3 CC
; ret              -> 4 CC
; 2*LDI        -> 2 CC 
; SBIW         -> 2 CC * 19997
; BRNE        -> 1/2 CC * 19997
; 

            LDI XH, HIGH(19997)
            LDI XL, LOW (19997)
COUNT:  
            SBIW XL, 1
            BRNE COUNT
            RET
;
DEL4P1ms:
            LDI XH, HIGH(5464)
            LDI XL, LOW (5464)
COUNT1:
            SBIW XL, 1
            BRNE COUNT1
            RET 
;
DEL100mus:
            LDI XH, HIGH(131)
            LDI XL, LOW (131)
COUNT2:
            SBIW XL, 1
            BRNE COUNT2
            RET 
;
DEL49ms:
            LDI XH, HIGH(65535)
            LDI XL, LOW (65535)
COUNT3:
            SBIW XL, 1
            BRNE COUNT3
            RET 